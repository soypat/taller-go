# Go desde cero
Curso para aprender Go
20 Nov 2020
Tags: novato,curso,principiante,aprender
Summary: Desarrollado para un curso de WIE ITBA.


Patricio Whittingslow
Agustín Canalis
pwhittingslow@itba.edu.ar
acanalis@itba.edu.ar

## Qué es Go?
Lenguaje de programación moderno caracterizado por su simplicidad, manejo de memoria (garbage collection) y buen manejo en equipos grandes.
Re: .image /assets/go-img/green-ubuntu-coffee.png 250 _
: Mientras esperaban 40 minutos para que termine de compilar un programa C++, un equipo de 3 personas de Google se pusieron a pensar que forma tendría un lenguaje moderno... 
: No es necesario manejar la memoria en Go, se ocupa solo el lenguaje y te simplifica la vida bastante! Es todo un surtido de bugs que ya no molestan
: Go es usado en Google, Discord, Netflix, Amazon, Twitch. Soluciona problemas para grandes empresas y es ideal para grandes equipos
: debido a esto último se suele pensar que Go solo le sirve a las empresas grandes, no es verdad! Es un lenguaje buenísimo para varias otras cosas!
: Ken Thompson, co-creador de Go, es el creador de C.
: Go toma simplicidad de todos los lenguajes vistos arriba y es lo que se dice que lo destaca entre otros lenguajes complejos como C++ y Java. Comparado a Java Go solo tiene 50 páginas de spec sheet comparado a las 750 de Java (x15) o las 1600 páginas del estándar ISO de C++

Inspiración para Go

* OOP de **Smalltalk**
* Sintaxis de **Algol**
* _Garbage Collection_ de **Limbo**
* Concurrencia de **Newsqueak**
* Legibilidad y facilidad de uso de **Python**

<img src="/assets/go-img/hero-gopher.png" style="position:fixed; right:0; bottom:0; height:35%; width:35%"> 


## Palabras clave

Las 25 palabras clave en Go:

.code src/0keywords.go /KW_S/,/KW_E/
.caption Una lista completa de todos los _keywords_ de Go

: Si buscan encontraran que está escondida la temible goto ahí en el medio

## Hello World

## Hello world {#helloworld}

.play -edit src/1helloworld.go

La línea:

.code src/1helloworld.go /package/

establece que estamos escribiendo un paquete que en este caso se llama main. Luego, la línea: 

.code src/1helloworld.go /import/

indica que vamos a usar cosas de la librería `fmt`. 

##

Lo que en verdad corre de todo esto es:

.code src/1helloworld.go /START/,/END/ HLhello

* Se declara **`s`** de tipo **`string`** y se le asigna el valor **`Hello, 世界`**
* A través de la sintaxis `fmt.Println` seleccionamos la función **`Println`**, que nos deja imprimir cualquier valor a consola.

<details><summary>aclaracion nombre de paquetes</summary>
Los programas ejecutables siempre tienen "package main" y tienen una función llamada "main()" que no tiene argumentos
como en el ejemplo. 
Los paquetes diseñados para ser importados por otros no tienen esa restricción. Pueden llamarse `package dinosaurio` si se quiere.
</details>

<details><summary>cómo importar varias librerías</summary>
 Para importar varias librerías se rodean con parentesis
.code src/1imports.go /import/,/\)/
</details>

## Tipo de Datos

## Tipos básicos

Toda variable en Go es un tipo básico o se compone de varios tipos básicos

.code src/0types.go /TYPES_S/,/TYPES_E/
.caption Una lista completa de todos los tipos básicos en Go

: En estas filminas solo trabajaremos con int y string y un poco de floats

## Tipo "int"

Go tiene los siguientes operadores básicos para números enteros: **`+ - * / %`**

.play -edit  src/1numbers.go /MAIN_S/,/MAIN_E/

Se pueden ahorrar algo de tiempo de esta manera:

.play -edit  src/1numberssimple.go /MAIN_S/,/MAIN_E/

Para esta presentación vamos a usar el estilo que normalmente se usa para declarar variables según la situación. 
Más información en la última placa.


: En la práctica, se usa más la versión corta.

: PATO :Acuerdense que todo programa corre adentro de la función main(). De ahora en adelante obviaremos esta parte del código para algunos ejemplos
// CANA: Lo de obviar la función main me parece demasiado implícito, y son dos líneas. Si tenemos sufience espacio, diría de mantener func main(){}
: empieza a parecerse a python el código de a poco

: Cambiar + por -,*,/,% y cambiar int a float64 
// CANA: Consider mentioning if and when we use it: Como es usual, la division entera redondea para abajo

## Tipo "strings"

Se pueden concatenar strings con los operadores **`+`** y **`+=`**

.play -edit src/1arithmeticstring.go /PROG_S/,/PROG_E/

: Introducir operador += !

## Expresiones: if, for, y func

## if

Mostraremos la sintaxis con un ejemplo: 

.play -edit src/3ifelse.go /PROG_S/,/PROG_E/

El bloque delimitado por **{}** se ejecuta sólamente si `a` es igual a `"ooh wee"`. 

<details><summary>Tipo `bool`</summary>
La expresión `a=="ooh wee"` es de tipo `bool`, y puede tener el valor de `true` o `false`. 

Como tal, puede ser asignado a una variable de ese tipo, de esta manera: 

`var b bool

 b = a=="ooh wee"`
 </details>

<details><summary>Operadores binarios</summary>
==
!=
>
<
>=
<=
</details>

<details><summary> Operadores Unarios </summary>
&& 
||
</details>

<details><summary>sintaxis de else y else-if</summary>

.play -edit src/3elseif.go /PROG_S/,/PROG_E/
</details>

## for

Lo más fácil es explicarlo mediante un ejemplo.

.play -edit src/3fori.go /PROG_S/,/PROG_E/

Aquí se inicializa **`i`**, imprime **`i`**, y le suma 1 hasta llegar a diez. 

: Problema: aparece mucho syntax sugar de una aca y todavia no lo vimos anteriormente

// Un for que recorre un arreglo
//.play -edit src/3forrange.go /PROG_S/,/PROG_E/

## func

Una función es una parte de código que queremos reutilizar. Un ejemplo clásico es una función que devuelve la suma de dos números

.code  src/2func.go /PROG_S/,/PROG_E/

: en este ejemplo trivial x e y son los inputs y la salida es la suma de los dos

Ahora en cualquier lugar de nuestro código que queramos sumar dos números, podemos hacerlo de esta manera: 

.play -edit src/2func.go /FUNC_S/,/FUNC_E/

.caption Las funciones se pueden asignar a variables y ser argumentos de otras funciones.

: Se dieron cuenta que asigne con los dos puntos? El siguiente slide veremos las varias formas 
: Que quede claro donde defino las funciones. son por afuera de main... aunque no hay nada que me impida de definirla adentro
// CANA: Consider skipping, unless we use it in the future

## Retorno de múltiples valores

.play -edit src/2multireturn.go 

// Conside skipping, unless used

## Últimos comentarios

## Declaraciónes acortadas y sintaxis azucarada
El uso de "var", "=", ":=", y la aclaración del tipo de dato puede resultar confuso.
// CANA: Consider mentioning the reasons why you would use one way or the other, to complement the examples.  

.play -edit src/2shorthand.go /PROG_S/,/PROG_E/
.caption *Declaración* *sin* *tipo:* Declaramos un `string`, entero (`int`) y un `float64` sin especificar el tipo.

.play -edit src/2implicit.go /PROG_S/,/PROG_E/
.caption *Declaración* *corta:*  acorta mucho la cantidad de caracteres a escribir

: Declaración corta no puede usarse fuera de una función y a diferencia de declaración con var, pueden redeclarar variables dado que es una declaración multivariable.
// CANA: This is edge-casy, consider skipping

## Charla dada por el product manager de Go (2015)
: CANA: Add other resources.

Un video que todo gopher debería ver. Se trata sobre el origen de Go.

.iframe https://www.youtube.com/embed/sX8r6zATHGU 500 800

## Preguntas? 

.image /assets/go-img/purple-pacman-nerd.png 480 _
.caption Diseño del _Gopher_ hecho por [[https://instagram.com/reneefrench][Renee French]]. Crédito a Mat Ryer por la WebApp [[https://gopherize.me/][Gopherize me]]

