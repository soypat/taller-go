# Go efectivo
20 Nov 2020
Tags: curso,avanzado,efectivo
Summary: Desarrollado para un curso de WIE ITBA.
OldURL: https://a/


Patricio Whittingslow
Agustín Canalis
pwhittingslow@itba.edu.ar
acanalis@itba.edu.ar

## ¿Por que Go?

* Go está diseñado para ingeniería informática moderna
* Go es simple
* Go es rápido
* Escribir programas concurrentes es fácil
* El ecosistema Go
* [Más info](https://stackoverflow.blog/2020/11/02/go-golang-learn-fast-programming-languages/)

: Pat. Pocos keywords. Spec breve. Compila rápido. 
: Fácil compartir librerías. 

## Casos de uso

* Web development
    * Librerías: [`http`](https://golang.org/pkg/net/http/), [`pion`](https://github.com/pion/webrtc#readme) (webrtc) y [`gorilla`](https://github.com/gorilla/)
    * Framework. [`gin`](https://github.com/gin-gonic) y [`buffalo`](https://gobuffalo.io/en/)

* Programas CLI
    * Librerías: [`pflags`](https://github.com/spf13/pflag#readme), [`termbox`](https://github.com/nsf/termbox-go#readme)
    * Frameworks: [`cobra`](https://github.com/spf13/cobra#readme)


* [Cientos de otras cosas](https://github.com/avelino/awesome-go#awesome-go)

: Pat. Mencionar experiencia con el curso de go usando Buffalo.  
: Tiene bootstrap integrado con posibilidad de integrar Vue.js. Postgres, mysql, sqlite3, etc para DB. Muy inspirado en ruby, los que vengan de Ruby on rails estarán muy afamiliarizados con el flujo de desarrollo.

## Hello World

: Cana. Clase anterior. Variables, Tipos, If, For, Func. Experiencia Programando. Charla tiempo limitado. Ver las diferencias de Go. 

## Hello World

.play -edit src/1helloworld.go /package/,/MAIN_E/

El primer argumento de <code>Printf</code> es un string con el formato que queremos que imprima el resto de los argumentos. 
El <code>%v</code> indica que queremos que se inserte el siguiente argumento con formato de string, y en ese lugar. 

<details><summary> Lista completa de verbos </summary>

.code src/1helloworld.go /FMT_S/,/FMT_E/

: Cana. 

</details>

## Tipos compuestos

: Cana. Int, String. Compuestos contienen más información
## Tipos compuestos

Un tipo compuesto es un tipo de dato que puede ser construido con los tipos primitivos de un lenguaje.

* Slices (listas/vector)
* Structs 
* Maps (dicts)
* Interfaces

.image /assets/go-img/gopher.png 200 _
.caption Diseño del _Gopher_ hecho por [[https://instagram.com/reneefrench][Renee French]]

: Cana. Familiares a otros lenguages.

## Slices

Un slice es un conjunto de datos del mismo tipo, ordenados secuencialmente. 

.play -edit src/1slice.go /PROG_S/,/PROG_E/

: Cana. 

## Maps (diccionarios)

Un mapa es una relación entre valores de un tipo y valores de otro. 

.play -edit src/1maps.go /PROG_S/,/PROG_E/

: Cana. Grupo de datos asociados entre sí. 

## Structs

Un struct es una colección de campos. Un campo es una variable que tiene un determinado nombre y un determinado tipo.

.play -edit src/3structdeclaration.go /type Pel/,/MAIN_E/

: Pato. Modelan datos de la realidad 
: Ej. Agregar campos de Actores, cada Actor puede tener Nombre, Apellido, y así.
: STOP

## Métodos 

## Metodos: Declaración y uso

Un método es una función que está ligada a un cierto tipo. 

.play -edit src/4method.go /type/,/MAIN_E/

: Pato. Agrega comportamiento a nuestros tipos.

## Pasando referencias

Las funciones (y métodos) reciben copias de los argumentos, no los argumentos en sí. Por eso, modificarlos adentro de una función no tiene ningún efecto. (Ver ejemplo sin asterisco)

Si eso es lo que buscamos, hay que pasar **referencias** como argumentos, es decir, punteros. 

.play -edit src/4methodref.go /REFMETHOD_S/,/MAIN_E/
<figcaption> El <code>*</code> indica que <code>p</code> es de "tipo puntero a una Película" y no "tipo Película". Probar el código con y sin el asterisco en el receptor para ver la diferencia.</figcaption> 

: Pato. Lo mostramos porque es común. Pero pueden ser complicados y no van a aparecer en la presentación. 
: STOP

## Bloques y Funciones

## 
<h3> Bloques <code>{ }</code> y Scope (alcance) </h3>

.play -edit src/1blocks.go /MAIN_S/,/MAIN_E/

Hay una tres reglas muy simples que indican si se puede acceder a una variable en un cierto lugar o no:

1. El caracter <code>{</code> abre un bloque y <code>}</code> lo cierra. 

2. En una función, una variable se puede utilizar desde que se declara, hasta que cierra el bloque que la contiene.

3. Una variable declara fuera de la función (en el top level) siempre es accesible, independientemente del orden.

: Cana. Por si alguien no vino ayer, probablemente se tope con esto. Variables no siempre accesibles. 

## Funciones como tipos

Las funciones pueden ser guardadas en una variable de tipo "función".

Aquí se asigna y se declara la variable <code>mas1</code>:

.play -edit src/2inlinefunc.go /PROG_S/,/PROG_E/

Se puede llamar a la función inmediatamente después de la declaración: 

.play -edit src/2inlinereturn.go /PROG_S/,/PROG_E/

: Cana. Detalles de funciones. Mencionamos esto para usarlo más adelante.

## Closures (ejemplo)

Una patrón común que usa esto se denomina _closure_ y se usa cuando se quiere que la función acceda a variables definidas por fuera de ésta. 

Aquí <code>mas1</code> puede acceder a la variable <code>a</code> definida anteriormente.

.play -edit src/2closure.go /PROG_S/,/PROG_E/
El concepto de un _closure_ es especialmente útil cuando entran en juego los modificadores de funciones, <code>defer</code> y <code>go</code>.

: Pat: A veces se pueden pasar variables tipo función como parámetros de entrada y salida de una función. 
: STOP

## Funciones variadicas

Una función variádica puede tomar cualquier cantidad de argumentos. 

La cantidad a devolver es fija. 

.code src/2variadic.go /FUNC_S/,/FUNC_E/

.play -edit src/2variadic.go /PROG_S/,/PROG_E/

<figcaption>La familia de funciones <code>fmt.Print</code> son todas variádicas</figcaption>

: Pato. 

## Interfaces

: Cana. Hablar de OOP. No existen Clases. No existe Inheritance. El modelo es distinto.
: El modelo de OOP de Go lo hace particular.

## Interfaces

Una interface es una colección de métodos. 

Así se define una de las interfaces más importantes, la <code>io.Reader</code>

.code src/5interface.go /INTERFACE_S/,/INTERFACE_E/

Representa a **cualquier** tipo que tenga implementado ese método. 

Las funciónes que toman un tipo interface como argumento, aceptan a cualquiera de esos tipos.

<figcaption style="position:absolute;bottom:1em;margin-right:4em;margin-left:-1em;">"When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck." ~James Whitcomb Riley 1888<figcaption>

: "Cuando veo un pajaro que camina como un pato, nada como un pato y suena igual a un pato, llamo ese pajaro un pato" ~James Whitcomb Riley 1888
: 
: Cana. Es una de las interfaces más importantes

## 
<h3> Caso <code>ReadAll</code> </h3>

En el paquete <code>ioutil</code> hay una función llamada <code>ReadAll</code>, que lee todos los contenidos de un <code>io.Reader</code>.

.code src/5interface.go /READALL_S/,/READALL_E/

En la librería estándar hay 31 tipos que cumplen las condiciones del <code>io.Reader</code>:

.code src/5interface.txt

<code>ReadAll</code> hace su trabajo con cualquiera de ellos.

: Cana. No importa si es un buffer, una respuesta http, o un archivo.

## Ejemplo completo

.play src/5interface.go /ALL_S/,/ALL_E/

: Cana. Usamos Interfaces sin darnos cuenta. 
: Tangente. Aprovechar hablar de errores. Un err es una variable que tiene tipo error. Muy común preguntar si NO es nil.
: Ask STOP?

## ¿Por qué interfaces?

Toman en cuenta la ***funcionalidad*** de los tipos de datos, y abstrae el resto de los detalles.

Con interfaces:
* La programadora de funciones puede abstraer detalles y dar flexibilidad a las usuarias.
* La usuaria de las funciones tiene un amplio catálogo de funciones disponibles.
* Usar las funciones es cuestión de implementar los métodos de la interface.

: Cana. En soledad no tienen mucho uso. 
: Toman valor cuando muchas librerías implementan la interface y todo el mundo se pone de acuerdo.
: La lectura de datos es algo ubicuo en la programacion. tiene sentido que exista solo una funcion para leerlos. Solo varia la implementacion.
## Concurrencia

: Concurrencia de Go es única, fácil y rica.
: Concurrencia no es nada nuevo, Go tambien toma inspiracion de un lenguaje viejo para los conceptos que veremos (newsqueak).

: Pato

## Un programa secuencial (no concurrente)

.play src/6nonconcurrentcounter.go


: Pato
: Concurrencia de Go es única, fácil y rica. 
: Ejemplos simplificados, pero imaginen que los procesos pueden ser requests y ese tipo de cosas que llevan su tiempo.

## 
<h3> Concurrencia y <code>go</code> </h3>

La concurrencia es la ejecución de procesos al mismo tiempo.

En go, esto se logra usando la palabra <code>go</code> antes de las funciones. 

.code src/6concurrentcounterpitfall.go /GOLINE_S/,/GOLINE_E/

<code>go</code> ejecuta la función, mientras que el programa continúa inmediatamente sin esperar a que la función termine.

Se llaman **gorutinas** a cada uno de estos procesos independientes.

Cualquier función puede ser llamada con <code>go</code> sin necesidad de modificarla.

<figcaption style="position: absolute; bottom:40px;"> "Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once." ~ <a href="https://www.youtube.com/watch?v=oV9rvDllKEg"> Rob Pike</a></figcaption>

: Pato
: Livianas. Miles de gorutinas a la vez. 

: No hay que modificar la función, A diferencia de otros lenguajes como Javascript y Python
: segway: Como modificar funcion Hacer -> concurrente?

## Un programa concurrente

.play -edit src/6concurrentcounterpitfall.go
<figcaption>Modificar la línea de <code>main()</code> a <code>go Hacer("pan🍞")</code></figcaption>

: Pato
: Solo cambiamos una linea. Muy fácil hacer concurrencia en Go
: El programa ahora corre dos veces más rápido!
: Queremos hacerlo 100% concurrente agregando otro `go`
: STOP

## Sincronizando gorutinas con variables

.play -edit src/6concurrentcounter.go /MAIN_S/,/MAIN_E/
.caption Si bien esto funciona, hay mejores maneras. 

: variables que sirven de señal de espera
: 
: Pato

## Canales (channels)

: Cana 

## Canales

Los canales se usan para mandar mensajes entre gorutinas. 

Para inicializar un canal:

.code src/6channels.go  /CHANMAKE_S/,/CHANMAKE_E/

Para enviar un mensaje:

.code src/6channels.go  /CHANSEND_S/,/CHANSEND_E/

Para recibir un mensaje: 

.code src/6channels.go  /CHANREC_S/,/CHANREC_E/

<figcaption> En este caso los mensajes son de tipo <code>string</code>, pero puede usarse cualquier tipo</figcaption>

: Cana. Este es un tipo nuevo que tiene sintaxis especial. 

## Ejemplo 

.play src/6gopizza.go /MAIN_S/,/FUNC_E/

.caption Los canales comunican *y* sincronizan.

: Cana. 
: Los canales pueden pasarse como argumentos a funciones.
: Vamos a mostrar cómo resolver problemas comunes... uno no tarda mucho en acostumbrarse.
: 
: STOP->segway: Como leemos todos los mensajes de `Hacer`?


## Sincronizando con canales

.play -edit src/6chandeadlock.go /MAIN_S/,/FUNC_E/

Error 🙃

: Pato
: Intentamos recibir en un canal que nunca mas iba a recibir un mensaje


## Deadlock - Explicación

<code>main</code> se queda esperando el sexto mensaje que nunca llegará. El Go se da cuenta de que todas las gorutinas están bloqueadas y termina con el error ***deadlock!***.

Para prevenir este error, se puede avisar que ya no hay más mensajes **cerrando** el canal:

.code src/6chanclose.go /CLOSE_S/,/CLOSE_E/

Y las gorutinas que reciben mensajes de ese canal pueden preguntar si sigue abierto o no: 

.code src/6chanclose.go /ASK_S/,/ASK_E/

La variable <code>abierto</code> es un <code>bool</code> que vale <code>true</code> si el canal está abierto.

: Pato
: STOP?

## 
<h3> Sincronizando gorutinas con <code>close()</code> </h3>

.play -edit src/6chanclose.go /MAIN_S/,/FUNC_E/
: Pato. Es un error mandar mensaje por un canal cerrado

##
<h3> Sincronizando gorutinas con <code>range</code></h3>

Este código es equivalente al anterior, pero más corto.

.play -edit src/6chanrange.go /MAIN_S/,/FUNC_E/

<figcaption> La palabra clave <code>range</code> se puede usar para iterar sobre canales, slices y mapas </figcaption>

: Pato
: STOP

## Bloqueo de canales

Una gorutina se bloquea si: 
* Necesita recibir un mensaje, pero no hay ninguno disponibles
* Envía un mensaje, pero no hay nadie quien lo reciba. 

.play -edit src/6chanbuffpitfall.go /MAIN_S/,/MAIN_E/

En este caso la mensajera bloquea el programa y el receptor nunca llega a atenderlo, causando un ***deadlock***.

Esto se resuelve con buffered channels

: Pato
: Mandar por un canal no se compara a un tiro de basketball. Es más parecido a una entrega de pizza. La mensajera se queda esperando en la puerta a ser atendida.

## Buffered channels 

Un buffered channel es un canal que puede guardar un cierto número de mensajes antes de bloquearse. 

Este buffered channel puede recibir 2 mensajes antes de bloquear la gorutina.

.code src/6chanbuff.go /MAKE_S/,/MAKE_E/

Ahora a puede seguir la ejecución después de mandar un mensaje:

.play -edit src/6chanbuff.go /MAIN_S/,/MAIN_E/

: Pato

## Select

: Pato

## Bloqueo de canales lentos

El siguiente programa es limitado por la gorutina más lenta.

.play -edit src/6beforeselect.go /MAIN_S/,/MAIN_E/
<figcaption> El programa es limitado por la velocidad a la que el canal 2 puede recibir mensajes (<code><-c2</code>) </figcaption>

: Pato

## Select

<code>select</code> le permite al programa esperar hasta que llegue un mensaje entre varios canales.

.play -edit src/6afterselect.go /MAIN_S/,/MAIN_E/

: Pato. Select decide qué hacer de acuerdo con el canal del que le llega. 
: STOP
## Preguntas?

## Anexo

## File scanner
.play -edit src/9_filescan.go

.caption Este ejemplo descarta el valor del error de `os.Open`, lo cual no se debería hacer en aplicaciones serias.

## ReadAll the file!
.play -edit src/9_filereadall.go

