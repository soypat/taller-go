# Go efectivo
Go para entendidos
20 Nov 2020
Tags: curso,avanzado,efectivo
Summary: Desarrollado para un curso de WIE ITBA.
OldURL: https://a/


Patricio Whittingslow
Agustín Canalis
pwhittingslow@itba.edu.ar
acanalis@itba.edu.ar




## Hola mundo

.play -edit src/1helloworld.go /package/,/MAIN_E/
.caption El %s es un verbo que se le pasa a la función Printf. El siguiente argumento que se le pase a Printf reemplaza el verbo. Una lista completa de verbos [[https://golang.org/pkg/fmt/][aquí]]

.code src/1helloworld.go /FMT_S/,/FMT_E/

## Conceptos de Go

## Zero value

.play -edit src/1zerovalues.go /PROG_S/,/PROG_E/
.caption Los valores de inicialización para tipos numéricos, bools y strings son 0, falso y "" (string vacío), respectivamente

## Terminación de programa

.play -edit src/1termination.go /MAIN_S/,/MAIN_E/

## Tipos agregados

## Tipos agregados/tipos compuestos
Un tipo agregado es un tipo de dato que puede ser construido con los tipos primitivos de un lenguaje.

* Structs
* Listas
* Arreglos
* Mapas/Diccionarios

: Las listas de Go se llaman slices y son fácil de manejar una vez que tenés un entendimiento básico del lenguaje

: Por esto nos vamos a enfocar más en structs, métodos e interfazes que es donde Go atrae mucho interés por ser un lenguaje orientado a objetos restringido.
: Go no tiene Inheritance ni clases, pero se arregla con el concepto de interfaz y method set, respectivamente.

.image /assets/go-img/gopher.png 200 _
.caption Diseño del _Gopher_ hecho por [[https://instagram.com/reneefrench][Renee French]]

## Structs

## Declaración y asignación

.play -edit src/3structdeclaration.go /package/,/MAIN_E/

## Declaración con new (pointer)

.play -edit src/3structnew.go
.caption Observen que se imprime la struct con el prefijo "`&`". Este es el operador dereferencia. Indica que `p` es un puntero a un datatype. Si no está seguro de la diferencia, no use `new` .

: Si no están afamiliarizado con pointers, descuiden. No haremos hincapié en este curso en punteros porque no es algo crítico para programar en Go.

## Declaración composite literal

.code src/3structdeclaration.go /DECL_S/,/DECL_E/

* Se pueden tener campos que sean structs (struct nesting)
* Los campos de una struct puede ser la misma struct. Útil para árboles binarios
* Se puede tener una función en un campo (no es lo mismo que un método)
* Las structs pueden ser comparadas por igualdad con `==`

## Slices

## Slices

Aquí se comienza declarando un *slice*. Por detrás se crea un arreglo y se toma la referencia.

.play -edit src/1slice.go /PROG_S/,/PROG_E/

: Cuando se usa append no se crea un nuevo arreglo, se crea un nuevo slice. Por eso no es un método la función append

Se pueden obviar los límites superiores o inferiores tomando indices de arreglos o slices. Los siguientes son equivalentes para un arreglo de longitud 5:

.code src/1slice.go /IDX_S/,/IDX_E/
.caption El resultado de un rango de índices siempre es un *slice*

: slice es más usado que los arreglos pero conlleva sus cuidados especiales (null pointer dereference)



## Referencias
.play -edit src/1shorthandslice.go /PROG_S/,/PROG_E/

Aquí tenemos un slice llamado **`beatles`** del cual tomamos referencia del primer al tercer elemento

Cuando asignamos a la referencia **`beatleSlice`** en verdad ***estamos modificando el arreglo original***

Cuidado con esto!


: La declaración corta ahorra mucho espacio y hace que el código sea más legible pero puede resultar confuso!
: Vamos a alternar entre formas de declarar para que se vayan acostumbrando a Go. Puede llevar un tiempo acostumbrarse a las varias formas de declarar variables
: Esto ocurre para prevenir el copiado inecesario de arreglos. Si uno en verdad quiere copiar un arreglo puede usar la librería reflect. 
: Esto no solo pasa en Go, las listas de Python funcionan de la misma forma!


## Maps

## Mapas (diccionarios)

.play -edit src/1maps.go /PROG_S/,/PROG_E/

Se puede eliminar un conjunto clave-valor con **`delete`**

.code src/1maps.go /DEL_S/,/DEL_E/

Se puede revisar si existe un valor pidiendo un segundo argumento

.code src/1maps.go /OK_S/,/OK_E/

* **`ok==true`** si existe la clave en el map
* **`ok==false`** si no está presente la clave

## Pitfalls con mapas

El siguiente programa compila sin problemas

.play -edit src/1mapnilderef.go /PROG_S/,/PROG_E/
.caption Nos olvidamos de inicializar el mapa

### Fin de tipos agregados




## Métodos

## Declaración de método y uso

.play -edit src/4method.go /type/,/MAIN_E/

## Método por referencia

La única diferencia de cambiar el receptor a que sea referencia es que se puede modificar los valores de la misma estructura en el mismo método

.play -edit src/4methodref.go /func/,/MAIN_E/
.caption Probar el código con y sin el asterisco en el receptor para ver la diferencia.

## Interface

## Interfaces
Abajo los dos interfaces más usados en Go como son declarados en el paquete **`io`**

.code src/5interface.go /INTERFACE_S/,/INTERFACE_E/

.code src/5interface.go /USG_S/,/USG_E/
.caption Se dice que `os.File` implementa el Writer y Reader interface.

## Por qué interfaces?

Es una abstracción que toma en cuenta la ***funcionalidad*** común entre tipos de datos.

No tienen mucho uso cuando uno programa en soledad. Se convierten en un abstracción fundamental al programar cuando muchas librerías implementan la interface. 

Supongamos que quiero crear mi propia interface para que el resto del mundo la use. En el ejemplo siguiente se declara una interface llamada **`Stacker`** que tiene dos métodos propios de un LIFO Stack.

.code src/4stacker.go /INTERFACE_S/,/INTERFACE_E/

El éxito del interface depende de cuantos lo adopten y lo incluyan como argumentos en sus funciones.


## Implementación de un LIFO stack interface

.play -edit src/4stacker.go /type Stack /,/MAIN_E/

: No nos vamos a quedar mucho tiempo aca porque esto no es algo que programarian en Go
: es comodo trabajar directo sobre los slices para la mayoria de los casos que implementar metodos para cada caso

## Paquete os, manejo de errores y lectura de archivos

.play -edit src/5os.go

## Conceptos de funciones

## Funciones variadicas

.code src/2variadic.go /FUNC_S/,/FUNC_E/

.play -edit src/2variadic.go /PROG_S/,/PROG_E/
.caption Una función puede tomar un número inde90finido de argumentos pero la cantidad a devolver es fija 

## Closures (ejemplo tonto)

Escribir:

.play -edit src/2closure.go /PROG_S/,/PROG_E/

Es lo mismo que escribir:

.code src/2closure.go /FPROG_S/,/FPROG_E/
El concepto de un _closure_ solo es útil cuando entran en juego los modificadores de funciones.

: Las funciones son first class citizens en Go. Se pueden usar como variables. Hay veces que tiene sentido pasar una función pero en general el OOP se encarga mejor de eso.
: Los dos ejemplos de arriba son casi idénticos. El compilador de Go usa function inlining por defecto, no asigna un bloque de memoria para cada función
: Este ejemplo es testamento a la inutilidad de closures en un lenguaje común. Se imaginan que concepto de Go las puede hacer útiles?
: Las function modifiers: `go` y `defer`

## Closure error wrapping

.code src/2closurewrap.go /FUNC_S/,/FUNC_E/ 
.caption El proposito del defer aquí es poder hacerle un posprocesado a los datos una vez que termina la función. En este caso es para generar un error más util para el usuario de la librería/programa.
.play -edit src/2closurewrap.go /PROG_S/,/PROG_E/ 

## Concurrencia

## Qué es la concurrencia

* No es paralelismo
* 

Rob Pike, uno de los creadores de Go, dice 

,,_Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once._"


## La palabra clave go

**`go`** hace que la función devuelva ejecución a la función circundante inmediatamente

* Funciona para cualquier función

.code  src/6gofirst.go /FUNC_S/,/FUNC_E/

: A diferencia de otros lenguajes como Javascript y Python, cualquier función se puede correr asincrónicamente sin necesidad de modificarla. 
## Mi primer programa concurrente fallido

.play -edit src/6gopitfall.go

.caption  El programa termina inmediatamente después del segundo `Println` durante la ejecución de la primer llamada concurrente

: Este es el error típico que cometen todos cuando escriben su primer programa concurrente. El programa no espera a que termine de correr la primer función llamada

## Mi primer programa concurrente

.play -edit src/6gofirst.go /package/,/MAIN_E/


## Concurrencia

.play -edit src/6goroutine.go 

: `go` es un function modifier, es decir, modifica el comportamiento de la llamada a una función. El único otro function modifier en el lenguaje es `defer` 